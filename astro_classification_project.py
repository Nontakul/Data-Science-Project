# -*- coding: utf-8 -*-
"""Astro Classification Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17X4I8uOrXuvQIhDap9W7CHA6SAfAq3JA

# Install pycaret
"""

!pip install pycaret

"""# Upgrade numpy for the version that match with pycaret"""

!pip install --upgrade numpy==1.20.0

"""# Check numpy version"""

import numpy

numpy.__version__

"""## Import all library"""

from pycaret.utils import enable_colab
enable_colab()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from pycaret.classification import *

"""## Load dataset"""

train = pd.read_csv('train_features.csv')
train_label = pd.read_csv('train_labels.csv')
test = pd.read_csv('test_features.csv')

train.head()

train_label.head()

test.head()

"""# Check data size in each dataset"""

print('Train size: {}'.format(train.shape))
print('Label size: {}'.format(train_label.shape))
print('Test  size: {}'.format(test.shape))

"""# Prepare data for modelling"""

# Prepare data for modelling
df = train.iloc[:, 1:]

#Add Colume classLabel in df
df['classLabel'] = train_label['classLabel']
df.head()

"""# Prepare data for test data (Unseen data)"""

# Prepare data for test data (Unseen data)
dt = test.iloc[:, 1:]
dt.head()

"""## Modelling using pycaret"""

clf = setup(df, target = 'classLabel')

models()

"""# View top 5 models"""

top5_model = compare_models(sort = 'Accuracy', fold = 5, n_select = 5)

top5_model

"""# Select top 3 model for using"""

best_specific = compare_models(include = ['lr','xgboost','gbc'], n_select = 3)

best_specific

"""# Tuning 3 models before predicting"""

#Logistic Regression
tuned_model_1 = tune_model(best_specific[0], optimize = 'Accuracy', n_iter = 50, fold = 5)

#Extreme Gradient Boosting
tuned_model_1 = tune_model(best_specific[1], optimize = 'Accuracy', n_iter = 50, fold = 5)

#Gradient Boosting Classifier
tuned_model_1 = tune_model(best_specific[2], optimize = 'Accuracy', n_iter = 50, fold = 5)

"""# Finalize the best 3 models"""

fin_0 = finalize_model(best_specific[0])
fin_1 = finalize_model(best_specific[1])
fin_2 = finalize_model(best_specific[2])

"""# Emsemble Using  Majority Vote"""

# Emsemble Using  Majority Vote
blender = blend_models(estimator_list = [fin_0, fin_1, fin_2], method = 'hard')

print(blender)

"""# Prediction"""

predictions = predict_model(blender, data=dt)

print(predictions)

"""# Load Submission format"""

# Load Submission format
submiss = pd.read_csv("submission_template.csv")

submiss.head()

"""# Concatenate output with object ID"""

# Concatenate output with object ID
submiss['predictedLabel'] = predictions['Label']

submiss.head()

"""#Save output csv file"""

#Save output csv file
submiss.to_csv('sumbmission_submit.csv', index =False)